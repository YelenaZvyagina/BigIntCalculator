{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BigInt Calculator \u00b6 BigIntCalculator is a tool for computing arithmetic expressions with long integers. Contains libraries for long arithmetics and non-empty lists and an interpreter for a simple programming language.","title":"BigInt Calculator"},{"location":"#bigint-calculator","text":"BigIntCalculator is a tool for computing arithmetic expressions with long integers. Contains libraries for long arithmetics and non-empty lists and an interpreter for a simple programming language.","title":"BigInt Calculator"},{"location":"BigInt/","text":"BigInt \u00b6 BigInt is a library used for a BigIntCalculator, it implements functions for long arithmetics. Type \u00b6 An instance of BigInt consists of isPos of Boolean and digits of <MyList<int>> . <MyList<int>> consists of integers from 0 to 9 Functions \u00b6 ml1Greater (ml1:MyList<_>) (ml2:MyList<_>) - checks, if the first number is greater than the second, while numbers are represented in lists isEqual (ml1 : MyList<_>) (ml2 : MyList<_>) - checks whether two numbers represented in lists are equal toFirst (lst:MyList<_>) - changes the structure of a number, represented in list, that the whole number is stored in \"First\" removeZeros (ml : MyList<_>) - removes zeros in the beginning of number, represented in list reverseSign (bntBigIntt) - changes a sign of a number isOdd (bnt:BigInt) - checks whether the number is odd zeroComplete (ml:MyList<_>, num:int, toEnd:Boolean - adds proper amount of zeros to the number becomeEqual (ml1:MyList<_>) (ml2:MyList<_>) - equalizes lengths of two lists by adding zeros to the beginning of one of them transferOdd (ml:MyList<_>) - results in a list, which elements are digits from 0 to 9 bntEqual (bnt1:BigInt) (bnt2:BigInt) - checks if two number are equal sumMl (ml1:MyList<_>) (ml2:MyList<_>) - summs two numbers represented in lists subMl (ml1:MyList<_>) (ml2:MyList<_>) - subtracts the second number from the first one, while numbers are represented in lists sumBigInt (bnt1:BigInt) (bnt2:BigInt) - summs two numbers subBigInt (bnt1:BigInt) (bnt2:BigInt) -subtracts the second number from the first one multToNumMl (ml:MyList<_>) (num:int) - multiplies the number represented in lists to an integer multMl (ml1:MyList<_>) (ml2:MyList<_>) - multiplicates two numbers represented in lists multBnt (bnt1:BigInt) (bnt2:BigInt) - multiplicates two numbers select (big:MyList<_>) (small:MyList<_>) - finds the number that by multiplicating with the second number gives the closest product to the fisrt number, while numbers are represented in lists divRemMl (ml1:MyList<_>) (ml2:MyList<_>) - finds the quotient and remainder of dividing the first number by the second, while numbers are represented in lists divBnt (bnt1:BigInt) (bnt2:BigInt) - finds the quotient of dividing the first number by the second remBnt (bnt1:BigInt) (bnt2:BigInt) - finds the remainder of dividing the first number by the second absBnt (bnt:BigInt) - returns an absolute value of a number toBinary (x:BigInt) - converts a number to it's binary representation toPower (bnt:BigInt) (num:BigInt) - returns a result of exponentiation strToBigint (s:String) - converts string to a BigInt bntToString (bnt : BigInt) - converts BigInt to a BigInt","title":"BigInt"},{"location":"BigInt/#bigint","text":"BigInt is a library used for a BigIntCalculator, it implements functions for long arithmetics.","title":"BigInt"},{"location":"BigInt/#type","text":"An instance of BigInt consists of isPos of Boolean and digits of <MyList<int>> . <MyList<int>> consists of integers from 0 to 9","title":"Type"},{"location":"BigInt/#functions","text":"ml1Greater (ml1:MyList<_>) (ml2:MyList<_>) - checks, if the first number is greater than the second, while numbers are represented in lists isEqual (ml1 : MyList<_>) (ml2 : MyList<_>) - checks whether two numbers represented in lists are equal toFirst (lst:MyList<_>) - changes the structure of a number, represented in list, that the whole number is stored in \"First\" removeZeros (ml : MyList<_>) - removes zeros in the beginning of number, represented in list reverseSign (bntBigIntt) - changes a sign of a number isOdd (bnt:BigInt) - checks whether the number is odd zeroComplete (ml:MyList<_>, num:int, toEnd:Boolean - adds proper amount of zeros to the number becomeEqual (ml1:MyList<_>) (ml2:MyList<_>) - equalizes lengths of two lists by adding zeros to the beginning of one of them transferOdd (ml:MyList<_>) - results in a list, which elements are digits from 0 to 9 bntEqual (bnt1:BigInt) (bnt2:BigInt) - checks if two number are equal sumMl (ml1:MyList<_>) (ml2:MyList<_>) - summs two numbers represented in lists subMl (ml1:MyList<_>) (ml2:MyList<_>) - subtracts the second number from the first one, while numbers are represented in lists sumBigInt (bnt1:BigInt) (bnt2:BigInt) - summs two numbers subBigInt (bnt1:BigInt) (bnt2:BigInt) -subtracts the second number from the first one multToNumMl (ml:MyList<_>) (num:int) - multiplies the number represented in lists to an integer multMl (ml1:MyList<_>) (ml2:MyList<_>) - multiplicates two numbers represented in lists multBnt (bnt1:BigInt) (bnt2:BigInt) - multiplicates two numbers select (big:MyList<_>) (small:MyList<_>) - finds the number that by multiplicating with the second number gives the closest product to the fisrt number, while numbers are represented in lists divRemMl (ml1:MyList<_>) (ml2:MyList<_>) - finds the quotient and remainder of dividing the first number by the second, while numbers are represented in lists divBnt (bnt1:BigInt) (bnt2:BigInt) - finds the quotient of dividing the first number by the second remBnt (bnt1:BigInt) (bnt2:BigInt) - finds the remainder of dividing the first number by the second absBnt (bnt:BigInt) - returns an absolute value of a number toBinary (x:BigInt) - converts a number to it's binary representation toPower (bnt:BigInt) (num:BigInt) - returns a result of exponentiation strToBigint (s:String) - converts string to a BigInt bntToString (bnt : BigInt) - converts BigInt to a BigInt","title":"Functions"},{"location":"Installation/","text":"Installation \u00b6 Package can be installed with dotnet by following these steps: Add a source in your NuGet.config file dotnet nuget add source \"https://nuget.pkg.github.com/YelenaZvyagina/index.json\" Authorize with your github token paket config add-token \"https://nuget.pkg.github.com/YelenaZvyagina/index.json\" <token> Install the package dotnet add PROJECT package BigIntCalculator --version <version>","title":"Installation"},{"location":"Installation/#installation","text":"Package can be installed with dotnet by following these steps: Add a source in your NuGet.config file dotnet nuget add source \"https://nuget.pkg.github.com/YelenaZvyagina/index.json\" Authorize with your github token paket config add-token \"https://nuget.pkg.github.com/YelenaZvyagina/index.json\" <token> Install the package dotnet add PROJECT package BigIntCalculator --version <version>","title":"Installation"},{"location":"Interpreter/","text":"Interpreter \u00b6 Interpreter can be used both by developers and users Developers \u00b6 Firstly, Main.parse <string> creates an abstract syntax tree to interpretate code. Then Interpreter.run <ast> returns three dictionaries. The first contains values of all variables in AST.Expression format,the second contains variables in string format, the third has only one key - \"print\" with string of result of interpretation. Dot file with a syntax tree can be obtained by running ToTree.ToDot <ast> <output file path> . Another functions \u00b6 processExpr (vDict:Dictionary<AST.VName,AST.Expression>) (expr:AST.Expression) - return a result of a given expression in BigInt format processStmt (vDict:Dictionary<AST.VName,AST.Expression>) (pDict:Dictionary<string,string>) (stmt:AST.Stmt) - gets an expression from a statement and sets it's value to a dictionaries with variable as a key calculate (ast:AST.Stmt list) - assisting function to compute a result of code with a single statement errorHighlight (line:int), (col:int), (msg:string), (lastToken:String) - prints into console highlighted message with location of error in code. Located in module CliColors, that also includes declaration for colours, that are used. Code example: \u00b6 let program = \"let x = 12 print x\" let ast = parse program let _, _, pDict = Interpreter.run ast printfn \"%s\" pDict.[\"print\"] After running the given code 12 will be printed into console. Users \u00b6 There are four console commands in BigInt Calculator --inputfile <file path> - enter a file with code --inputstring <string> - enter a string with code --compute - return the result of interpretation of the code --todot <file path> - return dot code of syntax tree to the given file You will get the result after running \"BigIntCalculator.exe\" from console with given commands","title":"Interpreter"},{"location":"Interpreter/#interpreter","text":"Interpreter can be used both by developers and users","title":"Interpreter"},{"location":"Interpreter/#developers","text":"Firstly, Main.parse <string> creates an abstract syntax tree to interpretate code. Then Interpreter.run <ast> returns three dictionaries. The first contains values of all variables in AST.Expression format,the second contains variables in string format, the third has only one key - \"print\" with string of result of interpretation. Dot file with a syntax tree can be obtained by running ToTree.ToDot <ast> <output file path> .","title":"Developers"},{"location":"Interpreter/#another-functions","text":"processExpr (vDict:Dictionary<AST.VName,AST.Expression>) (expr:AST.Expression) - return a result of a given expression in BigInt format processStmt (vDict:Dictionary<AST.VName,AST.Expression>) (pDict:Dictionary<string,string>) (stmt:AST.Stmt) - gets an expression from a statement and sets it's value to a dictionaries with variable as a key calculate (ast:AST.Stmt list) - assisting function to compute a result of code with a single statement errorHighlight (line:int), (col:int), (msg:string), (lastToken:String) - prints into console highlighted message with location of error in code. Located in module CliColors, that also includes declaration for colours, that are used.","title":"Another functions"},{"location":"Interpreter/#code-example","text":"let program = \"let x = 12 print x\" let ast = parse program let _, _, pDict = Interpreter.run ast printfn \"%s\" pDict.[\"print\"] After running the given code 12 will be printed into console.","title":"Code example:"},{"location":"Interpreter/#users","text":"There are four console commands in BigInt Calculator --inputfile <file path> - enter a file with code --inputstring <string> - enter a string with code --compute - return the result of interpretation of the code --todot <file path> - return dot code of syntax tree to the given file You will get the result after running \"BigIntCalculator.exe\" from console with given commands","title":"Users"},{"location":"Language/","text":"Language guide \u00b6 BigIntCalculator uses a simple programming language to process arithmetic expressions Code consists of statements with variables' names and arithmetic expressions with them. Each arithmetic expression is defined as a variable, that can be used in other expressions or printed in console. Statements \u00b6 There are two types of statements in the language. print <vname> prints the result of computed expression related to a given variable \u00b6 let <vname> = <expression> Declares a variable associated with the given expression. \u00b6 <vname> starts with a latin character and may include numbers and other letters \u00b6 <expression> consists of numbers, other variables and arithmetic operators such as \u00b6 +, -, *, /, %, ^, &, (, ), | \u00b6 Expressions \u00b6 Num of <BigInt> NVar of <VName> Sum of <Expression * Expression> Sub of <Expression * Expression> Mul of <Expression * Expression> Div of <Expression * Expression> Rem of <Expression * Expression> Pow of <Expression * Expression> Bin of <Expression> Abs of <Expression> Operators \u00b6 + - sums two expressions - - subtracts the second expression from the first expression, also acts as unary minus if immediatly followed by number * - multiplies two expressions / - divides the first expression by the second expression % - finds the remainder of division of two expressions ^ - raises the first expression to the power of second expression & - converts a number to it's binary representation | - acts as a brackets for returning absolute value of the expression ( , ) - parenthesis to specify operators' priority Code Example \u00b6 let x = 45 / 15 + | 10 - 22 | let y = x * 6 print y Given code should result in 90.","title":"Language guide"},{"location":"Language/#language-guide","text":"BigIntCalculator uses a simple programming language to process arithmetic expressions Code consists of statements with variables' names and arithmetic expressions with them. Each arithmetic expression is defined as a variable, that can be used in other expressions or printed in console.","title":"Language guide"},{"location":"Language/#statements","text":"There are two types of statements in the language. print <vname>","title":"Statements"},{"location":"Language/#prints-the-result-of-computed-expression-related-to-a-given-variable","text":"let <vname> = <expression>","title":"prints the result of computed expression related to a given variable"},{"location":"Language/#declares-a-variable-associated-with-the-given-expression","text":"","title":"Declares a variable associated with the given expression."},{"location":"Language/#vname-starts-with-a-latin-character-and-may-include-numbers-and-other-letters","text":"","title":"&lt;vname&gt; starts with a latin character and may include numbers and other letters"},{"location":"Language/#expression-consists-of-numbers-other-variables-and-arithmetic-operators-such-as","text":"","title":"&lt;expression&gt; consists of numbers, other variables and arithmetic operators such as"},{"location":"Language/#-","text":"","title":"+, -, *, /, %, ^, &amp;, (, ), |"},{"location":"Language/#expressions","text":"Num of <BigInt> NVar of <VName> Sum of <Expression * Expression> Sub of <Expression * Expression> Mul of <Expression * Expression> Div of <Expression * Expression> Rem of <Expression * Expression> Pow of <Expression * Expression> Bin of <Expression> Abs of <Expression>","title":"Expressions"},{"location":"Language/#operators","text":"+ - sums two expressions - - subtracts the second expression from the first expression, also acts as unary minus if immediatly followed by number * - multiplies two expressions / - divides the first expression by the second expression % - finds the remainder of division of two expressions ^ - raises the first expression to the power of second expression & - converts a number to it's binary representation | - acts as a brackets for returning absolute value of the expression ( , ) - parenthesis to specify operators' priority","title":"Operators"},{"location":"Language/#code-example","text":"let x = 45 / 15 + | 10 - 22 | let y = x * 6 print y Given code should result in 90.","title":"Code Example"},{"location":"MyList/","text":"MyList \u00b6 MyList is a library, implementing functions for non-empty lists. It's used for BigInt functions. Type \u00b6 MyList is a discriminated union with First of 't or Cons of 't * MyList<t> . Functions \u00b6 fold (f:'a -> 'b -> 'a) (acc:'a) (l:MyList<'b>) - implementation of List.fold for MyList length (l:MyList<'t>) - returns a length of a list iter (l:MyList<'a'>) (f:'a -> unit) - applies a given function to each element of a list sysListToMyList (l:MyList<'a'>) - converts List to MyList myListToSystemList (l:MyList<'a'>) - converts MyList to List concat (l1:MyList<'a'>) (l2:MyList<'a'>) - concatinates two lists map (f:'a -> 'b) (x:MyList<'a>) - returns a list to whose elements the given function has been applied sort (l:MyList<'t>) - returns a sorted list getHead (ml:MyList<_>) - returns the head of list getTail (ml:MyList<_>) - returns the tail of list reverse (ml:MyList<int>) - returns a reversed list","title":"MyList"},{"location":"MyList/#mylist","text":"MyList is a library, implementing functions for non-empty lists. It's used for BigInt functions.","title":"MyList"},{"location":"MyList/#type","text":"MyList is a discriminated union with First of 't or Cons of 't * MyList<t> .","title":"Type"},{"location":"MyList/#functions","text":"fold (f:'a -> 'b -> 'a) (acc:'a) (l:MyList<'b>) - implementation of List.fold for MyList length (l:MyList<'t>) - returns a length of a list iter (l:MyList<'a'>) (f:'a -> unit) - applies a given function to each element of a list sysListToMyList (l:MyList<'a'>) - converts List to MyList myListToSystemList (l:MyList<'a'>) - converts MyList to List concat (l1:MyList<'a'>) (l2:MyList<'a'>) - concatinates two lists map (f:'a -> 'b) (x:MyList<'a>) - returns a list to whose elements the given function has been applied sort (l:MyList<'t>) - returns a sorted list getHead (ml:MyList<_>) - returns the head of list getTail (ml:MyList<_>) - returns the tail of list reverse (ml:MyList<int>) - returns a reversed list","title":"Functions"},{"location":"Structure/","text":"Github repository structure \u00b6 BigIntCalculator \u251c\u2500\u2500 .config - dotnet tools \u251c\u2500\u2500 .github - GitHub Actions setup \u251c\u2500\u2500 docs - documentation files in .md format \u251c\u2500\u2500 src - code of the tool \u2502 \u251c\u2500\u2500 BigInt - interpreter, MyList, BigInt libraries | \u251c\u2500\u2500 BigInt.Cli - command interface \u251c\u2500\u2500 tests - tests | \u251c\u2500\u2500 BigInt.UnitTests - tests for BigInt library and interpreter \u251c\u2500\u2500 fsharplint.json - linter config \u251c\u2500\u2500 mkdocs.yml - MkDocs config \u2514\u2500\u2500 BigInt.sln - solution file","title":"Github repository structure"},{"location":"Structure/#github-repository-structure","text":"BigIntCalculator \u251c\u2500\u2500 .config - dotnet tools \u251c\u2500\u2500 .github - GitHub Actions setup \u251c\u2500\u2500 docs - documentation files in .md format \u251c\u2500\u2500 src - code of the tool \u2502 \u251c\u2500\u2500 BigInt - interpreter, MyList, BigInt libraries | \u251c\u2500\u2500 BigInt.Cli - command interface \u251c\u2500\u2500 tests - tests | \u251c\u2500\u2500 BigInt.UnitTests - tests for BigInt library and interpreter \u251c\u2500\u2500 fsharplint.json - linter config \u251c\u2500\u2500 mkdocs.yml - MkDocs config \u2514\u2500\u2500 BigInt.sln - solution file","title":"Github repository structure"}]}