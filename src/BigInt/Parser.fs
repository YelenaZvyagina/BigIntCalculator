// Implementation file for parser generated by fsyacc
module Parser
open bigIntCalculator
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | ABS
  | RBR
  | LBR
  | EQ
  | KW_PRINT
  | KW_LET
  | VNAME of (string)
  | BIN
  | POW
  | REM
  | DIV
  | MUL
  | SUB
  | SUM
  | NUM of (bigIntFunctions.bInt)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_ABS
    | TOKEN_RBR
    | TOKEN_LBR
    | TOKEN_EQ
    | TOKEN_KW_PRINT
    | TOKEN_KW_LET
    | TOKEN_VNAME
    | TOKEN_BIN
    | TOKEN_POW
    | TOKEN_REM
    | TOKEN_DIV
    | TOKEN_MUL
    | TOKEN_SUB
    | TOKEN_SUM
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_stmt
    | NONTERM_expr
    | NONTERM_rexpr
    | NONTERM_baseAndPow
    | NONTERM_power
    | NONTERM_vname
    | NONTERM_eof

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | ABS  -> 1 
  | RBR  -> 2 
  | LBR  -> 3 
  | EQ  -> 4 
  | KW_PRINT  -> 5 
  | KW_LET  -> 6 
  | VNAME _ -> 7 
  | BIN  -> 8 
  | POW  -> 9 
  | REM  -> 10 
  | DIV  -> 11 
  | MUL  -> 12 
  | SUB  -> 13 
  | SUM  -> 14 
  | NUM _ -> 15 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_ABS 
  | 2 -> TOKEN_RBR 
  | 3 -> TOKEN_LBR 
  | 4 -> TOKEN_EQ 
  | 5 -> TOKEN_KW_PRINT 
  | 6 -> TOKEN_KW_LET 
  | 7 -> TOKEN_VNAME 
  | 8 -> TOKEN_BIN 
  | 9 -> TOKEN_POW 
  | 10 -> TOKEN_REM 
  | 11 -> TOKEN_DIV 
  | 12 -> TOKEN_MUL 
  | 13 -> TOKEN_SUB 
  | 14 -> TOKEN_SUM 
  | 15 -> TOKEN_NUM 
  | 18 -> TOKEN_end_of_input
  | 16 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_stmt 
    | 4 -> NONTERM_stmt 
    | 5 -> NONTERM_stmt 
    | 6 -> NONTERM_stmt 
    | 7 -> NONTERM_stmt 
    | 8 -> NONTERM_stmt 
    | 9 -> NONTERM_stmt 
    | 10 -> NONTERM_expr 
    | 11 -> NONTERM_expr 
    | 12 -> NONTERM_expr 
    | 13 -> NONTERM_rexpr 
    | 14 -> NONTERM_rexpr 
    | 15 -> NONTERM_rexpr 
    | 16 -> NONTERM_rexpr 
    | 17 -> NONTERM_baseAndPow 
    | 18 -> NONTERM_baseAndPow 
    | 19 -> NONTERM_power 
    | 20 -> NONTERM_power 
    | 21 -> NONTERM_power 
    | 22 -> NONTERM_power 
    | 23 -> NONTERM_power 
    | 24 -> NONTERM_vname 
    | 25 -> NONTERM_eof 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 18 
let _fsyacc_tagOfErrorTerminal = 16

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | ABS  -> "ABS" 
  | RBR  -> "RBR" 
  | LBR  -> "LBR" 
  | EQ  -> "EQ" 
  | KW_PRINT  -> "KW_PRINT" 
  | KW_LET  -> "KW_LET" 
  | VNAME _ -> "VNAME" 
  | BIN  -> "BIN" 
  | POW  -> "POW" 
  | REM  -> "REM" 
  | DIV  -> "DIV" 
  | MUL  -> "MUL" 
  | SUB  -> "SUB" 
  | SUM  -> "SUM" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | ABS  -> (null : System.Object) 
  | RBR  -> (null : System.Object) 
  | LBR  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | KW_PRINT  -> (null : System.Object) 
  | KW_LET  -> (null : System.Object) 
  | VNAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BIN  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | REM  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | SUB  -> (null : System.Object) 
  | SUM  -> (null : System.Object) 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;2us;65535us;0us;1us;2us;3us;2us;65535us;0us;2us;2us;2us;4us;65535us;8us;9us;33us;16us;35us;17us;39us;18us;6us;65535us;8us;15us;19us;20us;21us;22us;33us;15us;35us;15us;39us;15us;9us;65535us;8us;23us;19us;23us;21us;23us;24us;25us;26us;27us;28us;29us;33us;23us;35us;23us;39us;23us;10us;65535us;8us;30us;19us;30us;21us;30us;24us;30us;26us;30us;28us;30us;31us;32us;33us;30us;35us;30us;39us;30us;14us;65535us;0us;10us;2us;10us;4us;5us;6us;7us;8us;38us;19us;38us;21us;38us;24us;38us;26us;38us;28us;38us;31us;38us;33us;38us;35us;38us;39us;38us;0us;65535us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;4us;7us;12us;19us;29us;40us;55us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;2us;1us;2us;1us;2us;1us;3us;1us;3us;1us;4us;1us;4us;1us;4us;3us;4us;11us;12us;1us;5us;1us;6us;1us;7us;1us;8us;1us;9us;4us;10us;14us;15us;16us;3us;11us;12us;19us;3us;11us;12us;20us;3us;11us;12us;23us;1us;11us;4us;11us;14us;15us;16us;1us;12us;4us;12us;14us;15us;16us;2us;13us;18us;1us;14us;2us;14us;18us;1us;15us;2us;15us;18us;1us;16us;2us;16us;18us;1us;17us;1us;18us;1us;18us;1us;19us;1us;19us;1us;20us;1us;20us;1us;21us;1us;22us;1us;23us;1us;24us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;7us;9us;11us;13us;15us;17us;19us;23us;25us;27us;29us;31us;33us;38us;42us;46us;50us;52us;57us;59us;64us;67us;69us;72us;74us;77us;79us;82us;84us;86us;88us;90us;92us;94us;96us;98us;100us;102us;|]
let _fsyacc_action_rows = 41
let _fsyacc_actionTableElements = [|7us;32768us;1us;14us;2us;13us;3us;12us;5us;4us;6us;6us;7us;40us;15us;11us;0us;49152us;7us;16385us;1us;14us;2us;13us;3us;12us;5us;4us;6us;6us;7us;40us;15us;11us;0us;16386us;1us;32768us;7us;40us;0us;16387us;1us;32768us;7us;40us;1us;32768us;4us;8us;5us;32768us;1us;35us;3us;33us;7us;40us;8us;39us;15us;37us;2us;16388us;13us;21us;14us;19us;0us;16389us;0us;16390us;0us;16391us;0us;16392us;0us;16393us;3us;16394us;10us;28us;11us;26us;12us;24us;3us;32768us;2us;34us;13us;21us;14us;19us;3us;32768us;1us;36us;13us;21us;14us;19us;2us;16407us;13us;21us;14us;19us;5us;32768us;1us;35us;3us;33us;7us;40us;8us;39us;15us;37us;3us;16395us;10us;28us;11us;26us;12us;24us;5us;32768us;1us;35us;3us;33us;7us;40us;8us;39us;15us;37us;3us;16396us;10us;28us;11us;26us;12us;24us;1us;16397us;9us;31us;5us;32768us;1us;35us;3us;33us;7us;40us;8us;39us;15us;37us;1us;16398us;9us;31us;5us;32768us;1us;35us;3us;33us;7us;40us;8us;39us;15us;37us;1us;16399us;9us;31us;5us;32768us;1us;35us;3us;33us;7us;40us;8us;39us;15us;37us;1us;16400us;9us;31us;0us;16401us;5us;32768us;1us;35us;3us;33us;7us;40us;8us;39us;15us;37us;0us;16402us;5us;32768us;1us;35us;3us;33us;7us;40us;8us;39us;15us;37us;0us;16403us;5us;32768us;1us;35us;3us;33us;7us;40us;8us;39us;15us;37us;0us;16404us;0us;16405us;0us;16406us;5us;32768us;1us;35us;3us;33us;7us;40us;8us;39us;15us;37us;0us;16408us;|]
let _fsyacc_actionTableRowOffsets = [|0us;8us;9us;17us;18us;20us;21us;23us;25us;31us;34us;35us;36us;37us;38us;39us;43us;47us;51us;54us;60us;64us;70us;74us;76us;82us;84us;90us;92us;98us;100us;101us;107us;108us;114us;115us;121us;122us;123us;124us;130us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;2us;2us;4us;1us;1us;1us;1us;1us;1us;3us;3us;1us;3us;3us;3us;1us;3us;3us;3us;1us;1us;2us;1us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;1us;2us;2us;2us;2us;2us;2us;2us;3us;3us;3us;4us;4us;4us;4us;5us;5us;6us;6us;6us;6us;6us;7us;8us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16386us;65535us;16387us;65535us;65535us;65535us;65535us;16389us;16390us;16391us;16392us;16393us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16401us;65535us;16402us;65535us;16403us;65535us;16404us;16405us;16406us;65535us;16408us;|]
let _fsyacc_reductions ()  =    [| 
# 188 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  AST.Program  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 197 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "Parser.fsy"
                                  [_1]
                   )
# 29 "Parser.fsy"
                 :  AST.Program ));
# 208 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_stmt in
            let _2 = parseState.GetInput(2) :?>  AST.Program  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                                        _1 :: _2
                   )
# 30 "Parser.fsy"
                 :  AST.Program ));
# 220 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_vname in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                           AST.Print(_2)
                   )
# 32 "Parser.fsy"
                 : 'gentype_stmt));
# 231 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_vname in
            let _4 = parseState.GetInput(4) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                                 AST.VDecl(_2,_4)
                   )
# 33 "Parser.fsy"
                 : 'gentype_stmt));
# 243 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_vname in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                  failwith "parse error"
                   )
# 34 "Parser.fsy"
                 : 'gentype_stmt));
# 254 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bigIntFunctions.bInt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                failwith "parse error"
                   )
# 35 "Parser.fsy"
                 : 'gentype_stmt));
# 265 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                failwith "parse error"
                   )
# 36 "Parser.fsy"
                 : 'gentype_stmt));
# 275 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                failwith "parse error"
                   )
# 37 "Parser.fsy"
                 : 'gentype_stmt));
# 285 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                failwith "parse error"
                   )
# 38 "Parser.fsy"
                 : 'gentype_stmt));
# 295 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_rexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                  _1
                   )
# 40 "Parser.fsy"
                 : 'gentype_expr));
# 306 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_rexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                           AST.Sum(_1, _3)
                   )
# 41 "Parser.fsy"
                 : 'gentype_expr));
# 318 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_rexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                           AST.Sub(_1, _3)
                   )
# 42 "Parser.fsy"
                 : 'gentype_expr));
# 330 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_baseAndPow in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                        _1
                   )
# 44 "Parser.fsy"
                 : 'gentype_rexpr));
# 341 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_rexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_baseAndPow in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                                 AST.Mul(_1, _3)
                   )
# 45 "Parser.fsy"
                 : 'gentype_rexpr));
# 353 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_rexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_baseAndPow in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                 AST.Div(_1, _3)
                   )
# 46 "Parser.fsy"
                 : 'gentype_rexpr));
# 365 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_rexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_baseAndPow in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                 AST.Rem(_1, _3)
                   )
# 47 "Parser.fsy"
                 : 'gentype_rexpr));
# 377 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_power in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                        _1
                   )
# 49 "Parser.fsy"
                 : 'gentype_baseAndPow));
# 388 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_baseAndPow in
            let _3 = parseState.GetInput(3) :?> 'gentype_power in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                 AST.Pow(_1, _3)
                   )
# 50 "Parser.fsy"
                 : 'gentype_baseAndPow));
# 400 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                          _2
                   )
# 52 "Parser.fsy"
                 : 'gentype_power));
# 411 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                         AST.Abs _2
                   )
# 53 "Parser.fsy"
                 : 'gentype_power));
# 422 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bigIntFunctions.bInt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                AST.Num(_1)
                   )
# 54 "Parser.fsy"
                 : 'gentype_power));
# 433 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_vname in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                  AST.NVar(_1)
                   )
# 55 "Parser.fsy"
                 : 'gentype_power));
# 444 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                     AST.Bin _2
                   )
# 56 "Parser.fsy"
                 : 'gentype_power));
# 455 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                   AST.Var(_1)
                   )
# 58 "Parser.fsy"
                 : 'gentype_vname));
# 466 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                               1
                   )
# 60 "Parser.fsy"
                 : 'gentype_eof));
|]
# 477 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 19;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  AST.Program  =
    engine lexer lexbuf 0 :?> _
